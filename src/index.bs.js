// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function getSecondaryDominantValue(halfStepFromKey) {
  switch (halfStepFromKey) {
    case 0 : 
        return "I7";
    case 1 : 
        return "bII7";
    case 2 : 
        return "II7";
    case 3 : 
        return "bIII7";
    case 4 : 
        return "III7";
    case 5 : 
        return "IV7";
    case 6 : 
        return "bV7";
    case 7 : 
        return "V7";
    case 8 : 
        return "bVI7";
    case 9 : 
        return "VI7";
    case 10 : 
        return "bVII7";
    case 11 : 
        return "VII7";
    default:
      return "I7";
  }
}

function getNoteIntValue(note) {
  switch (note) {
    case "a" : 
        return 9;
    case "b" : 
        return 11;
    case "a#" : 
    case "bb" : 
        return 10;
    case "c" : 
        return 0;
    case "d" : 
        return 2;
    case "c#" : 
    case "db" : 
        return 1;
    case "e" : 
        return 4;
    case "d#" : 
    case "eb" : 
        return 3;
    case "f" : 
        return 5;
    case "g" : 
        return 7;
    case "ab" : 
    case "g#" : 
        return 8;
    case "f#" : 
    case "gb" : 
        return 6;
    default:
      return 0;
  }
}

function flatToSharp(note) {
  switch (note) {
    case "ab" : 
        return "g#";
    case "bb" : 
        return "a#";
    case "db" : 
        return "c#";
    case "eb" : 
        return "d#";
    case "gb" : 
        return "f#";
    default:
      return note;
  }
}

function sharpToFlat(note) {
  switch (note) {
    case "a#" : 
        return "bb";
    case "c#" : 
        return "db";
    case "d#" : 
        return "eb";
    case "f#" : 
        return "gb";
    case "g#" : 
        return "ab";
    default:
      return note;
  }
}

function absoluteValue(number) {
  var match = number < 0;
  if (match) {
    return Caml_int32.imul(number, -1);
  } else {
    return number;
  }
}

function intervalDifference(intervalA, intervalB) {
  return absoluteValue(intervalA - intervalB | 0);
}

function getChordPositionRelativeToKey(key, chordRoot) {
  var lowercaseKey = $$String.lowercase(key);
  var lowercaseChordRoot = $$String.lowercase(chordRoot);
  var keyNoteValue = getNoteIntValue(lowercaseKey);
  var rootNoteValue = getNoteIntValue(lowercaseChordRoot);
  var intervalDifference = absoluteValue(rootNoteValue - keyNoteValue | 0);
  var secondaryDominant = getSecondaryDominantValue(intervalDifference);
  console.log(secondaryDominant);
  return /* () */0;
}

getChordPositionRelativeToKey("a", "b");

var notes = /* :: */[
  "c",
  /* :: */[
    "db",
    /* :: */[
      "d",
      /* :: */[
        "eb",
        /* :: */[
          "e",
          /* :: */[
            "f",
            /* :: */[
              "gb",
              /* :: */[
                "g",
                /* :: */[
                  "ab",
                  /* :: */[
                    "a",
                    /* :: */[
                      "bb",
                      /* :: */[
                        "b",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

exports.getSecondaryDominantValue = getSecondaryDominantValue;
exports.getNoteIntValue = getNoteIntValue;
exports.notes = notes;
exports.flatToSharp = flatToSharp;
exports.sharpToFlat = sharpToFlat;
exports.absoluteValue = absoluteValue;
exports.intervalDifference = intervalDifference;
exports.getChordPositionRelativeToKey = getChordPositionRelativeToKey;
/*  Not a pure module */
